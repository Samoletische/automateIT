2019-05-09    task_19_1   Статус: Формирование ТЗ
  Назначение:
    Сформировать костяк из подсистем: "Входные данные", "Клиент", "Сборщик", "Обработка данных", "Хранение данных", "Мониторинг", "Отчётность".

  Описание задания
    Подсистема "Входные данные".
      Расположение: Сервер (start.php).
      Вход: в рамках задачи - файл web.json. В дальнейшем данные с web-страницы.
      Выход: передача web.json "Клиенту" (client.php). В дальнейшем "Клиенту" (client.php) по адресу клиента, заполневшего данные на web-странице.

      Оставляем пока на уровне редактирования файла json.
      Добавляем в структуру web.json секцию по отбору. На основании этих данных сборщик будет фильтровать данные по другим признакам, не входящим в фильтрацию сайта.
      Этот отбор во-первых будет расширять возможности фильтра сайта, а во-вторых будет необходим при мониторинге, чтобы не тратить время на сбор лишних данных.
      Сформировать файл start.php, который в дальнейшем будет формировать входной json из данных на форме и посылать его конкретному клиенту.
      А пока он будет брать данные из файла web.json и стартовать процесс сбора, отправляя его в client.php.

    Подсистема "Клиент".
      Расположение: Клиент (client.php).
      Вход: web.json от подсистемы "Входные данные".
        Промежуточный выход 1: передача web.json и текущей страницы "Сборщику" (client.php конкретного сборщика (может быть на этом же компе)).
        Промежуточный вход 1: получение от "Сборщика" собранных данных collector.json.
        Промежуточный выход 2: передача collector.json "Обработке данных" для преобразования собранных данных.
        Промежуточный вход 2: получение от "Обработки данныз" переработанных данных collector.json.
      Выход: передача storage.json "Хранению данных" (storage.php) для сохранения данных в БД.

      Управление своими (клиентскими) сборщиками.
      В рамках задачи мы знаем их количество, знаем какие конкретно готовы. В дальнейшем определение статусов сборщиков происходить должно динамически.
      Распределение заданий между сборщиками по страницам в пагенаторе. В дальнейшем, если нет пагинатора, то определяем количество элементов и распределяем равномерно по сборщикам.
      Сбор собранных данных от "Сборщиков". Отправка этих данных на переработку "Обработке данных".
      Сбор переработанных данных от "Обработки данных". Отправка конечных данных "Хранению данных".

    Подсистема "Сборщик".
      Расположение: Клиент (client.php).
      Вход: web.json и страницу, с которой собирать, от "Клиента".
      Выход: collector.json "Клиенту".

      Собирает данные с текущей страницы
      В рамках задачи реализовать сбор данных с подстраниц. Подстраницы открывать в отдельной вкладке браузера.

    Подсистема "Обработка данных".
      Расположение: Клиент (client.php)
      Вход: collector.json от "Клиента"
      Выход: collector.json "Хранению данных"

      Преобразует собранные данные: скачивает, преобразует из base64, сохраняет файлы, распознаёт картинки.
      В рамках задачи вывести в отдельный класс. Реализовать действие скачать по ссылке.

    Подсистема "Хранение данных".
      Расположение: Сервер (storage.php)
      Вход: storage.json от "клиента"
      Выход: Отсутствует

      Сохраняет данные в JSON формате или в базе данных.
      В рамках задачи сохранять приходящие JSON в один большой. В дальнейшем надо будет перекачивать сохранённые файлы на сервер (например, по FTP).

    Подсистема "Мониторинг".
      Расположение: Сервер (monitor.php)
      Вход: в рамках задачи файл monitor.json. В дальнейшем данные с базы данных (настройки действующих мониторингов)
      Выход: Оповещение заказчика при срабатывании целей

      Отслеживает появление целей и оповещает заказчика о появлении цели.

    Подсистема "Отчётность".
      Расположение: Клиент (report.php)
      Вход: Запрашивает данные у "Хранения данных".
      Выход: Файл или отправляет данные в другую БД/Систему.

      В рамках задачи пока ничего не делаем.
