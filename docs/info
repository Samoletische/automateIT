----------------------------------------------------------------------------------------
Описание системы:
  Система предназначена для сбора, преобразования, хранения, отслеживания данных и предоставления отчётности по данным
  с web-ресурсов.

Описание подсистем:
  Подсистема "Входные данные".
    Расположение: Сервер (start.php).
    Вход: пока - файл web.json. В дальнейшем данные с web-страницы.
    Выход: передача web.json в "Сборщик" (web.php). В дальнейшем в "Сборщик" (web.php) по адресу клиента,
      заполневшего данные на web-странице.

    Пока получение параметров для запуска сбора сводиться к редактированию файла формата web.json.
    Данная подсистема получает по HTTP-запросу (в JSON формате) команду (command) getJSON. В ответ возвращает
    конкретный файл параметров формата web.json.

  Подсистема "Клиент".
    Расположение: Клиент (web.php).
    Вход: web.json от подсистемы "Входные данные".
    Выход: отсутствует.

    Управление своими (клиентскими) Сборщиками.
    Инициализация (см. диаграмму "Подсистема Клиент. Инициализация."):
      - Запрашиваем у "знакомых" Сборщиков их статус готовности через HTTP-интерфейс. Если они готовы,
      то помечаем их к использованию.
    Сбор данных (см. диаграмму "Подсистема Клиент. Сбор данных."):
      - Отдаём для сбора первую страницу первому готовому Сборщику.
      - Получаем следующую страницу из пагинатора. Если она есть, то отдаём следующему готовому Сборщику.
      Повторяем пока не переберём все страницы.

  Подсистема "Сборщик".
    Расположение: Клиент (spider.php).
    Состав:
      - HTTP-интерфейс для получения команд и отправки ответов Клиенту. Используется для управления
      и получения информации от запущенного экземпляра Сборщика.
      - запущенный(е) независимый(е) экземпляр(ы) Сборщика, который(е) получае(ю)т команды и
      отправляе(ю)т ответы HTTP-интерфейсу. Выполняе(ю)т нижеописанные действия в ассинхронном режиме.
    Вход: web.json и страницу, с которой собирать, от "Клиента".
    Выход: передача storage.json "Хранению данных" (storage.php) для сохранения данных в БД.

    Инициализация:
      - HTTP-интерфейс принимает команду от Клиента areYouReady. Проверяет возможность запуска
      Сборщика (проверяет доступность сервера Selenuim, доступность БД, файловой системы и т.д.).
      Проверки пока не работают.
      - Если Сборщик на этом клиенте может выполнять свои функции (прошли все проверки), то
      запускается независимый экземпляр Сборщика. Этому экземпляру передаётся его токен (при создании)
      и параметры сбора информации в формате web.json (через файл).
    Обмен данными между HTTP-интерфейсом и запущенным экземпляром Сборщика:
      - Идентификация экземпляра происходит по token'у, который знает Клиент и который записан в
      запущенном экземпляре Сборщика.
      - Интерфейс записывает команду в файл "[token].in.txt", и ждёт ответ из файла "[token].out.txt".
      - Обмен происходит таким образом, что в каждом файле может быть только одна команда и только
      один ответ. То есть, если приходит очередная команда, то она встаёт в ожидание, пока не
      выполнится предыдущая.
      - Реализованы следующие команды для обмена:
        - getStatus - запрос статуса у Сборщика
        - setCurrentPage - установка текущей страницы для сбора
        - getNextPage - получает следующую страницу из пагинатора
        - collect - команда для запуска сбора с текущей установленной страницы
    Сбор данных:
      - Собирает данные с текущей установленной страницы на основании данных из web.json.
      - Основные шаги сбора данных:
        I   Найти головной элемент данных
          а)  выполнить действия (для показа скрытых данных)
          б)  собрать данные (аттрибутов, ссылок)
          в)  собрать данные на второстепенных страницах
        II  Найти второстепенные элементы и:
          а)  выполнить действия (для показа скрытых данных)
          б)  собрать данные (аттрибутов, ссылок)
    Переработка данных:
      - Перерабатывает полученные данные. На данный момент реализованы (сохраняет файлы,
      распознаёт телефоны с картинки).
    Сохранение данных:
      - Отправляет переработанные данные подсистеме "Хранение данных" в формате storage.json.

  Подсистема "Обработка данных" (временно отсутствует).
    Расположение: Клиент (client.php)
    Вход: collector.json от "Клиента"
    Выход: collector.json "Хранению данных"

    Преобразует собранные данные: скачивает, преобразует из base64, сохраняет файлы, распознаёт картинки.
    В рамках задачи вывести в отдельный класс. Реализовать действие скачать по ссылке.
    Реализованы следующие команды:
      - recognize - распознавание номера телефона с картинки
      - save - сохранение объекта в файл по собранной ссылке
      - trim - обрезать пробелы и другие символы (перевод каретки, табуляция) с обоих сторон строки;
      - left - взять первые N символов строки;
      - right - взять последние N символов строки;
      - cutLeft - отрезать первые N символов строки;
      - cutRight - отрезать последние N символов строки.

  Подсистема "Хранение данных".
    Расположение: Сервер (storage.php)
    Вход: storage.json от "клиента"
    Выход: Отсутствует

    Сохраняет данные в JSON формате или в базе данных.

  Подсистема "Мониторинг" (временно отсутствует).
    Расположение: Сервер (monitor.php)
    Вход: в рамках задачи файл monitor.json. В дальнейшем данные с базы данных (настройки действующих
    мониторингов)
    Выход: Оповещение заказчика при срабатывании целей

    Отслеживает появление целей и оповещает заказчика о появлении цели.

  Подсистема "Отчётность" (временно отсутствует).
    Расположение: Клиент (report.php)
    Вход: Запрашивает данные у "Хранения данных".
    Выход: Файл или отправляет данные в другую БД/Систему.
